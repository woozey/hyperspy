language: python


env:
  global:
    - DISPLAY=99.0
    - MPLBACKEND="agg"

matrix:
  include:
    # All tests run for the latest supported Python version in Linux
  - env: export PYTHON=3.7; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='False'
  - env: export PYTHON=3.7; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='True'
    # Only standard test for older supported versions of Python in Linux
  - env: export PYTHON=3.6; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='False'
  - env: export PYTHON=3.5; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='False'
    # All tests, but the min requirements test run for the latest supported Python version in OSx
  - env: export PYTHON=3.7; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='False'
    os: osx
    language: generic
  - env: export PYTHON=3.6; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='False'
    os: osx
    language: generic
    if: tag IS present
  - env: export PYTHON=3.5; FAIL_ON_EXTERNAL_DEPRECATION='False'; MINIMAL_ENV='False'
    os: osx
    language: generic
    if: tag IS present
  allow_failures:
    # Only test for the latest supported version as chances are that it'll
    # contain the most up-to-date external libraries.
  - env: export PYTHON=3.7; FAIL_ON_EXTERNAL_DEPRECATION='True'; MINIMAL_ENV='False'

before_install:
  - if [[ $TRAVIS_OS_NAME == 'osx' ]] ; then
      curl "https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" -o miniconda.sh;
    else wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - chmod +x miniconda.sh;
    ./miniconda.sh -b -p $HOME/miniconda;
    export "PATH=$HOME/miniconda/bin:$PATH";
    hash -r;
install:

  - if [[ $MINIMAL_ENV == 'False' ]] ; then
      DEPS="pip numpy scipy matplotlib>2.2.3 ipython h5py sympy scikit-learn dill natsort setuptools scikit-image cython ipyparallel dask traits traitsui numexpr numba";
    else DEPS="pip ipython numpy scipy matplotlib>2.2.3 h5py sympy scikit-image numexpr";
    fi
  - conda create -n testenv --yes python=$PYTHON;
    source activate testenv;
    conda install -y -c conda-forge $DEPS;
  - if [[ $MINIMAL_ENV == 'False' ]] ; then
      pip install .[mrcz] && pip install 'matplotlib>=3.0.0';
    else pip install "matplotlib>=3.0.0" && pip install .[tests];
    fi

before_script: # configure a headless display to test plot generation
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then sh -e /etc/init.d/xvfb start; fi
  # from http://afitnerd.com/2011/09/06/headless-browser-testing-on-mac/
  # and https://github.com/travis-ci/travis-ci/issues/7313#issuecomment-279914149
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then ( sudo Xvfb :99 -ac -screen 0 1024x768x8; echo ok ) & fi
  - sleep 3 # give xvfb some time to start

script:
  - python -c 'import matplotlib.pyplot as plt; print(plt.get_backend())';
  - pip install coverage coveralls pytest-cov pytest-mpl;
    pytest --mpl --cov=hyperspy --pyargs hyperspy;

#after_failure: # run only on failure in case there is a need to check matplotlib image comparison
# This needs a service to upload the artifacts (and corresponding configuration)
# See:
# https://blog.travis-ci.com/2012-12-18-travis-artifacts/
# https://docs.travis-ci.com/user/uploading-artifacts/
# https://github.com/matplotlib/matplotlib/blob/master/.travis.yml
#  - gem install travis-artifacts
#  - zip -r image_comparison_failure.zip /tmp/ -i *.png
#  - travis-artifacts upload image_comparison_failure.zip

after_success:
- coveralls
- if [[ $MINIMAL_ENV == 'False' ]]; then
    python setup.py bdist_wheel;
  else python setup.py sdist;
  fi

before_deploy:
- export DISTRIB=$(ls ./dist/*);

deploy:
  provider: releases
  api_key:
    #francisco-dlp:
    secure: dTt5L3HsIrfTOvnU8QFqwMu+Ghpuzp+vr0y7skRbqdFBCmPfjbAe2l24haMidVC1x0ZikHGgv9krEd/aKEBLi6QM+E2KsxiXUJWlhTFMH5o8qsMTBSAS2ChfQ32Jlktg8oK0FMs+UO6EFbMz1cr7m1Fgc0Ikds1ZCzev6Uke2Zk=
  file: "${DISTRIB}"
  skip_cleanup: true
  on:
    tags: true
    condition: $MINIMAL_ENV = 'False'
